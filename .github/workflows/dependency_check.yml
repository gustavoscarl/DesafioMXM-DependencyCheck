name: Dependency Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dependency-check:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0'
        
        
    - name: Download Dependency-Check
      run: |
        Invoke-WebRequest -Uri "https://github.com/jeremylong/DependencyCheck/releases/download/v9.1.0/dependency-check-9.1.0-release.zip" -OutFile "dependency-check.zip"
        Expand-Archive -Path "dependency-check.zip" -DestinationPath "."
    
    - name: Run Dependency-Check
      run: |
        .\dependency-check\bin\dependency-check.bat --project "PayWiseBackend" --scan "./PaywiseBackend" --out "./dependency-check-report" --format "JSON" --nvdApiKey "d2bb331f-4cad-45a5-90bb-3fe4e28e33f2"
        
    - name: Check for Vulnerabilities
      id: check_vulnerabilities
      run: |
        $report = Get-Content -Path "./dependency-check-report/dependency-check-report.json" | ConvertFrom-Json
        $vulnerable = $false
        Write-Output "Vulnerability Report:"
        foreach ($dependency in $report.dependencies) {
            if ($dependency.vulnerabilities) {
                $vulnerable = $true
                foreach ($vuln in $dependency.vulnerabilities) {
                    $pkgId = $dependency.fileName  # Assuming the package ID is stored in fileName for each dependency
                    $severity = $vuln.severity
                    Write-Output "Package ID: $pkgId, Severity: $severity"
                }
            }
        }
        if ($vulnerable) {
            echo "vulnerable=true" >> $GITHUB_OUTPUT
        } else {
            echo "vulnerable=false" >> $GITHUB_OUTPUT
        }
    
    - name: Fail if vulnerabilities found
      if: steps.check_vulnerabilities.outputs.vulnerable == 'true'
      run: |
        echo "Vulnerabilities found, failing the build. Check and update your packages to fix security." >> $GITHUB_STATE
        exit 1
