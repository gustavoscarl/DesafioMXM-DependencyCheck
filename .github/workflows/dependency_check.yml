name: Dependency Check

on:
  push:
    branches:
      - main
      - test
  pull_request:
    branches:
      - main
      - test
jobs:
  dependency-check:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Download Dependency-Check
      run: |
        Invoke-WebRequest -Uri "https://github.com/jeremylong/DependencyCheck/releases/download/v9.1.0/dependency-check-9.1.0-release.zip" -OutFile "dependency-check.zip"
        Expand-Archive -Path "dependency-check.zip" -DestinationPath "."
    
    - name: Run Dependency-Check
      run: |
        .\dependency-check\bin\dependency-check.bat --project "PayWiseBackend" --scan "./PaywiseBackend" --out "./dependency-check-report" --format "JSON" --nvdApiKey "d2bb331f-4cad-45a5-90bb-3fe4e28e33f2"
        
    - name: Check for Vulnerabilities
      id: check_vulnerabilities
      run: |
       - name: Check for Vulnerabilities
          id: check_vulnerabilities
          run: |
            $report = Get-Content -Path "./dependency-check-report/dependency-check-report.json" | ConvertFrom-Json
            $vulnerable = $false
            Write-Output "Vulnerability Report:"
            
            $severityLevels = @{ 'LOW' = 0; 'MEDIUM' = 1; 'HIGH' = 2; 'HIGHEST' = 3; 'CRITICAL' = 4 }
            
            foreach ($dependency in $report.dependencies) {
                $highestSeverity = -1
                $highestSeverityLabel = ""
            
                if ($dependency.vulnerabilities) {
                    $vulnerable = $true
                    foreach ($vuln in $dependency.vulnerabilities) {
                        $currentSeverity = $severityLevels[$vuln.severity]
                        if ($currentSeverity -gt $highestSeverity) {
                            $highestSeverity = $currentSeverity
                            $highestSeverityLabel = $vuln.severity
                        }
                    }
                    $cpeList = $dependency.vulnerabilities | ForEach-Object { 
                        $_.vulnerableSoftware | ForEach-Object { $_.software.id } 
                    } | Select-Object -Unique
                
                    Write-Output "Dependency: $($dependency.fileName)"
                    Write-Output "CPEs: $($cpeList -join ', ')"
                    Write-Output "Package: $($dependency.packages.id)"
                    Write-Output "Highest Severity: $highestSeverityLabel"
                }
            }
            if ($vulnerable) {
                echo "vulnerable=true" >> $env:GITHUB_OUTPUT
            } else {
                echo "vulnerable=false" >> $env:GITHUB_OUTPUT
            }


    
    - name: Fail if vulnerabilities found
      if: ${{ steps.check_vulnerabilities.outputs.vulnerable == 'true' }}
      run: |
        echo "Vulnerabilities found, failing the build. Check and update your packages to fix security."
        exit 1
