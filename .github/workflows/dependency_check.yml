name: Dependency Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dependency-check:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Download Dependency-Check
      run: |
        Invoke-WebRequest -Uri "https://github.com/jeremylong/DependencyCheck/releases/download/v9.1.0/dependency-check-9.1.0-release.zip" -OutFile "dependency-check.zip"
        Expand-Archive -Path "dependency-check.zip" -DestinationPath "."
    
    - name: Run Dependency-Check
      run: |
        .\dependency-check\bin\dependency-check.bat --project "PayWiseBackend" --scan "./" --out "./dependency-check-report" --format "JSON" --nvdApiKey "d2bb331f-4cad-45a5-90bb-3fe4e28e33f2"
    
    - name: Check for Vulnerabilities
      id: check_vulnerabilities
      run: |
        $report = Get-Content -Path "./dependency-check-report/dependency-check-report.json" | ConvertFrom-Json
        $foundVulnerabilities = $false
        foreach ($dependency in $report.dependencies) {
          if ($dependency.vulnerabilities) {
            $foundVulnerabilities = $true
            break
          }
        }
        if ($foundVulnerabilities) {
          echo "::set-output name=vulnerable::true"
        } else {
          echo "::set-output name=vulnerable::false"
        }
    
    - name: Display Vulnerability Details
      if: steps.check_vulnerabilities.outputs.vulnerable == 'true'
      run: |
        $report = Get-Content -Path "./dependency-check-report/dependency-check-report.json" | ConvertFrom-Json
        Write-Output "Vulnerability Report:"
        foreach ($dependency in $report.dependencies) {
          if ($dependency.packages) {
            foreach ($pkg in $dependency.packages) {
              $pkgId = $dependencies.relatedDependencies.fileName
              if ($dependency.vulnerabilities) {
                foreach ($vuln in $dependency.vulnerabilities) {
                  $severity = $vuln.severity
                  Write-Output "Package ID: $pkgId, Severity: $severity"
                }
              }
            }
          }
        }
    
    - name: Fail if vulnerabilities found
      if: steps.check_vulnerabilities.outputs.vulnerable == 'true'
      run: |
        echo "Vulnerabilities found, failing the build"
        exit 1
